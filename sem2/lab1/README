Цель
Основная цель задания – научиться разрабатывать собственную библиотеку для работы со структурами данных, а именно – реализовать двунаправленный список с набором основных алгоритмов, таких как:

Создание списка

Вставка элементов (как в начало, так и в конец)

Удаление элементов

Сортировка

Поиск элемента

Объединение списков

Пересечение списков

Задача
Разработка библиотеки: Создать библиотеку на языке C#, реализующую структуру данных – двунаправленный список, с полным набором операций над ней.

Тестовая программа: Разработать демонстрационную программу, которая подтверждает корректную работу реализованной библиотеки.

Система тестов: Спроектировать систему тестирования, которая проверяет:

Корректную работу алгоритмов на валидных данных.

Безопасное завершение программы при получении некорректных данных.

Отчет: Составить подробный отчет по выполненному заданию.

Постановка задачи
Разработка библиотеки направлена на освоение навыков построения собственных решений для работы со структурами данных. В рамках задачи необходимо:

Реализовать класс двунаправленного списка с поддержкой базовых операций.

Гарантировать корректное выполнение алгоритмов даже в случаях возникновения ошибок или при неверных входных данных.

Обеспечить возможность дальнейшего расширения функционала библиотеки.

Используемые понятия и источники
Основные понятия: двунаправленный список, узел списка, алгоритмы поиска, сортировки, объединения и пересечения.

Алгоритмы: Реализация алгоритмов основывается на материалах с metanit.

Описание реализации
Библиотека реализована в пространстве имен MyLib и включает два основных класса:

MyList<T>
Класс, реализующий двунаправленный список, включает следующие методы:

Методы добавления:

Add(T data) – добавление элемента в конец списка.

AddFirst(T data) – добавление элемента в начало списка.

Методы удаления и поиска:

RemoveElement(T data) – удаление первого найденного элемента, равного заданному.

search(T data) – поиск элемента в списке.

Метод сортировки:

SortMintoMax() – сортировка элементов списка методом пузырьковой сортировки.

Методы работы со списками:

mergeList(MyList<T> list1, MyList<T> list2) – объединение двух списков.

FindIntersection(MyList<T> list1, MyList<T> list2) – поиск пересечения двух списков.

Дополнительные методы:

print() – вывод элементов списка в консоль.

Clear() – очистка списка.
