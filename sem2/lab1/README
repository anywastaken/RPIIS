════════════════════════════════════════════════════════════════════
                        Library for Doubly Linked List
════════════════════════════════════════════════════════════════════

╔══════════════════════════════════════════════════════════════════╗
║                             ЦЕЛЬ                                  ║
╚══════════════════════════════════════════════════════════════════╝
Основная цель задания – научиться создавать собственную библиотеку  
для работы со структурами данных, а именно – реализовать двунаправленный  
список с набором основных алгоритмов:

• Создание списка  
• Вставка элементов (как в начало, так и в конец)  
• Удаление элементов  
• Сортировка  
• Поиск элемента  
• Объединение списков  
• Пересечение списков  

╔══════════════════════════════════════════════════════════════════╗
║                             ЗАДАЧА                                ║
╚══════════════════════════════════════════════════════════════════╝

1. **Разработка библиотеки:**  
   Создать библиотеку на языке C#, реализующую двунаправленный список  
   с полным набором операций.

2. **Тестовая программа:**  
   Разработать демонстрационную программу, подтверждающую корректную работу  
   библиотеки.

3. **Система тестов:**  
   Спроектировать систему тестирования, которая проверяет:
   - Корректную работу алгоритмов на валидных данных.
   - Безопасное завершение программы при получении некорректных данных.

4. **Отчет:**  
   Составить подробный отчет по выполненному заданию.

╔══════════════════════════════════════════════════════════════════╗
║                        ПОСТАНОВКА ЗАДАЧИ                           ║
╚══════════════════════════════════════════════════════════════════╝
Разработка библиотеки направлена на освоение навыков построения  
собственных решений для работы со структурами данных. В рамках задачи  
необходимо:
  
• Реализовать класс двунаправленного списка с поддержкой базовых операций.  
• Гарантировать корректное выполнение алгоритмов даже при ошибках или  
  неверных входных данных.  
• Обеспечить возможность дальнейшего расширения функционала библиотеки.

╔══════════════════════════════════════════════════════════════════╗
║               ИСПОЛЬЗУЕМЫЕ ПОНЯТИЯ И ИСТОЧНИКИ                   ║
╚══════════════════════════════════════════════════════════════════╝
- **Основные понятия:**  
  двунаправленный список, узел списка, алгоритмы поиска, сортировки,  
  объединения и пересечения списков.
- **Алгоритмы:**  
  Реализация алгоритмов основывается на материалах с [metanit](https://metanit.com/).

╔══════════════════════════════════════════════════════════════════╗
║                     ОПИСАНИЕ РЕАЛИЗАЦИИ                           ║
╚══════════════════════════════════════════════════════════════════╝

Библиотека реализована в пространстве имен `MyLib` и включает два основных класса:

► **MyList<T>**  
   Класс, реализующий двунаправленный список, содержит следующие методы:

   - **Методы добавления:**  
     • `Add(T data)` – добавление элемента в конец списка.  
     • `AddFirst(T data)` – добавление элемента в начало списка.

   - **Методы удаления и поиска:**  
     • `RemoveElement(T data)` – удаление первого найденного элемента, равного заданному.  
     • `search(T data)` – поиск элемента в списке.

   - **Метод сортировки:**  
     • `SortMintoMax()` – сортировка элементов списка методом пузырьковой сортировки.

   - **Методы работы со списками:**  
     • `mergeList(MyList<T> list1, MyList<T> list2)` – объединение двух списков.  
     • `FindIntersection(MyList<T> list1, MyList<T> list2)` – поиск пересечения двух списков.

   - **Дополнительные методы:**  
     • `print()` – вывод элементов списка в консоль.  
     • `Clear()` – очистка списка.

► **DoublyNode<T>**  
   Вспомогательный класс для представления узлов двунаправленного списка,  
   содержащий ссылки на предыдущий и следующий элементы.

╔══════════════════════════════════════════════════════════════════╗
║                     РЕЗУЛЬТАТЫ ТЕСТИРОВАНИЯ                       ║
╚══════════════════════════════════════════════════════════════════╝
*Результаты тестирования будут дополнены. Тестовая программа продемонстрировала  
корректное выполнение всех операций библиотеки при корректных данных, а также  
безопасное завершение работы при возникновении ошибок ввода.*

╔══════════════════════════════════════════════════════════════════╗
║                            ВЫВОД                                  ║
╚══════════════════════════════════════════════════════════════════╝
В результате выполнения задания была разработана библиотека для работы  
с двунаправленным списком, включающая полный набор алгоритмов для работы с  
данной структурой данных. Реализованные методы демонстрируют корректное  
выполнение операций по добавлению, удалению, сортировке, поиску, объединению  
и пересечению списков. Разработанная система тестирования подтверждает  
надежность и устойчивость библиотеки при различных сценариях использования.

════════════════════════════════════════════════════════════════════
