Лабораторная работа 1
Цель:
Познакомиться с системой верстки текстов TeX, языком верстки TeX, издательской системой LaTeX. Выполнить вариант индивидуального задания.

Наиболее используемые команды в Latex:
Подключаемые пакеты:
\usepackage{cmap}: Для поиска в PDF.
\usepackage[T2A]{fontenc}: Для поддержки кириллицы.
\usepackage[utf8]{inputenc}: Для использования UTF-8.
\usepackage[english]{babel}: Для поддержки английского языка.
\usepackage{amsmath,amsfonts,amssymb,amsthm,mathtools,mathtext}: Для работы с математическими формулами.
\usepackage{graphicx}: Для вставки изображений.
\usepackage{multirow}: Для объединения ячеек таблицы по вертикали.
\usepackage{geometry}: Для настройки полей страницы.
\usepackage{caption}: Для настройки подписей к рисункам и таблицам.
\usepackage{array}: Для улучшенного форматирования таблиц.
\usepackage{multicol}: Для много колоночного оформления текста.
\usepackage{enumitem}: Для кастомизации списков.
\usepackage{hyperref}: Для добавления гиперссылок.
Основные команды:
\documentclass{article}: Определяет класс документа (например, статья).
\begin{document} ... \end{document}: Начало и конец документа.
\section{Название секции}: Создает раздел.
\subsection{Название подсекции}: Создает подраздел.
\subsubsection{Название подсубраздела}: Создает подподраздел.
Изменение текста:
\textbf{жирный текст}: Делает текст жирным.
\textit{курсивный текст}: Делает текст курсивом.
\underline{подчеркнутый текст}: Подчеркивает текст.
\raggedright: Выровнять текст по левому краю.
Списки:
\begin{itemize} ... \end{itemize}: Начало и конец ненумерованного списка.
\item: Элемент списка.
Более подробно можно почитать ТУТ
Лабораторная работа 3
Цель:
Познакомиться с программами git, освоить их программные аргументы.

image

Ознакомиться с заданиями 3 лабораторной работы можно ознакомится ТУТ

Выполнение:
1.Создание локального репозитория в текущей папке

git init
2.Просмотр статуса текущего репозитория

git status
3.Ветка (branch) — это отдельная линия разработки, позволяющая работать над различными функциями или исправлениями, не затрагивая основной код. Обычно основной веткой является main или master.

4.Добавление файла, который будет коммититься

git add "Имя файла"
5.Создание коммита на основе текущего контекста и указать для него комментарий

git commit -m "Название коммита"
6.Создание коммита, включающего изменения всех наблюдаемых файлов и указать для него комментарий

git commit -a -m "Название коммита"
7.Просмотр лога коммитов

git log
8.Просмотр информации о текущих настройках

git config --list
9.Убрать файл из контекста

git reset "Имя файла"
10.Посмотреть изменения в файле между коммитами

git diff <commit hash> <commit hash>
11.Убрать изменения относительно последнего коммита из файла

git restore "Имя файла"
12.Добавить в контекст коммита все измененные и созданные файлы

git add .
13.Изменить глобальные/локальные настройки

git config --global <ключ> <значение>
git config --local <ключ> <значение>
14.Переписать имя пользователя

git config --global user.name "Ваше Имя"
git config --global user.email "ваш_email@example.com"
15.Посмотреть существующие ветки

git branch(Для локальных веток)
git branch -a(Для локальных и удаленных)
16.Создать новую ветку

git branch "Имя ветки"
17.Переключиться на другую ветку

git checkout "Имя ветки"
18.Создать новую ветку и сразу же переключиться на неё

git checkout -b "Имя ветки"
19.Удалить ветку(1) и удалить ветку,даже если она примержена(2)

git branch -d "Имя ветки"
git branch -D "Имя ветки"
20.Примержить изменения из указанной ветки в текущую

git merge "Имя ветки" 
21-23.Подробную информацию о том,что такое конфликт и как его исправлять можно узнатьТУТ

24.Как переключиться на указанный коммит

git checkout "commit hash"
25-28.Информацию о git rebase можно узнать ТУТ

29.Отправить изменения из локального репозитория для указанной ветки в удалённый(дистанционный) репозиторий

git push "Удаленный репозиторий" "Имя ветки"
30-31.забрать изменения из репозитория, для которого были созданы удалённые ветки по умолчанию,забрать изменения удалённой ветки из репозитория по умолчанию, основной ветки можно ознакомиться ТУТ

32.Создание копии репозитория

git clone "Ссылка на удаленный репозиторий"
33.Переименовать последний коммит

git commit --amend -m "Cообщение"
34.Переименовать не последний коммит

git checkout "hash нужного коммита"
git commit --amend -m "Новое название коммита"
git checkout "hash самого последнего коммита"
Работа с удаленными хостингами
Наиболее популярным хостингом для хранения удаленных репозиториев является GitHub. Как начать работу с ним читайте ТУТ

Выводы
Git позволяет сохранять изменения локально и при необходимости возвращаться к предыдущим версиям проекта. Также можно создать удалённую копию на хостинг-платформе, которая работает с Git, и поделиться результатом с другими.
