#include <vector>
#include <iostream>
#include <fstream>
using namespace  std;
int main()
{
    setlocale(LC_ALL, "russian");
    int n, m, k;
    cout << "введите номер файла\n";
    cin >> k;
    string nameoffile;
    switch (k) {
    case 1: nameoffile = "graph1.txt"; break;
    case 2: nameoffile = "graph2.txt"; break;
    case 3: nameoffile = "graph3.txt"; break;
    case 4: nameoffile = "graph4.txt"; break;
    case 5: nameoffile = "graph5.txt"; break;
    default:
        cout << " неверный номер файла ";
        return 0;
    }
    ifstream file(nameoffile);
    file >> n;
    file >> m;
    bool isoriented = false;
    vector<vector<int>> matrix(n, vector<int>(m, 0));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            file >> matrix[i][j];
            if (matrix[i][j] == -1)
                isoriented = true;
        }
    }
    bool fl1 = false;
    bool fl2 = false;
    bool fl3 = false;
    bool fl11 = false;
    bool fl12 = false;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                fl1 = false;
                fl2 = false;
                fl3 = false;
                if (i != j && i != k && j != k) {
                    for (int v = 0; v < m; v++) {
                        if (matrix[i][v] == 1 && matrix[j][v] == -1)
                            fl1 = true;
                        if (matrix[j][v] == 1 && matrix[k][v] == -1)
                            fl2 = true;
                        if (matrix[i][v] == 1 && matrix[k][v] == -1)
                            fl3 = true;
                    }
                    if (fl1 && fl2 && fl3)
                        fl11 = true;
                    if (!(fl1 && fl2 && fl3))
                        fl12 = true;

                }

            }
        }
    }

    bool isctoriented = false;
    if (fl11 && fl12 && isoriented)
        isctoriented = true;
    else
        isctoriented = false;
    if (isctoriented) {
        cout << "частично транзитивный орграф";
        return 0;
    }



    bool istransitive = true;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                if (i != j && i != k && k != j) {
                    fl1 = false;
                    fl2 = false;
                    fl3 = false;
                    for (int v = 0; v < m; v++) {
                        if (matrix[i][v] == 1 && matrix[j][v] == 1)
                            fl1 = true;
                        if (matrix[i][v] == 1 && matrix[k][v] == 1)
                            fl2 = true;
                        if (matrix[k][v] == 1 && matrix[j][v] == 1)
                            fl3 = true;

                    }
                    if (!(fl1 && fl2 && fl3)) {
                        istransitive = false;
                    }
                }
            }
        }
    }
    if (istransitive && !isoriented) {
        cout << "тарнзитивный граф";
        return 0;
    }
    bool isantitransitive = true;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                if (i != j && i != k && k != j) {
                    fl1 = false;
                    fl2 = false;
                    fl3 = false;
                    for (int v = 0; v < m; v++) {
                        if (matrix[i][v] == 1 && matrix[j][v] == 1)
                            fl1 = true;
                        if (matrix[i][v] == 1 && matrix[k][v] == 1)
                            fl2 = true;
                        if (matrix[k][v] == 1 && matrix[j][v] == 1)
                            fl3 = true;
                    }
                    if (fl1 && fl2 && fl3) {
                        isantitransitive = false;
                    }
                }
            }
        }
    }
    if (isantitransitive && !isoriented) {
        cout << "антитранзитивный граф";
        return 0;
    }

    cout << "граф не является ни транзитивным, ни антитранзитивным, ни частично транзитивным орграфом";
    return 0;

}
